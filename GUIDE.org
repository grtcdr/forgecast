#+TITLE: Guided setup

This document outlines the different steps needed to integrate
Forgecast into your website.

Before we start, this guide assumes that:
1. You have a pulishing script where you define your project
   specification and other configuration variables which affect how
   your website is built.
2. You have installed Forgecast somewhere within your project.

In the publishing script, you will have to import both =ox-publish=
and =forgecast= as well as any other libraries you depend on.

#+begin_src emacs-lisp
(require 'ox-publish)
(require 'forgecast)
#+end_src

* Using Forgecast as a macro

Let's register to a =blob= macro the function which returns the URL to
the blob page of the currently visited document:

#+begin_src emacs-lisp
;; publish.el
(setq org-export-global-macros
      '(("blob" . "(eval (forgecast-get-resource-url 'blob))")))
#+end_src

We can now call the =blob= macro in an Org document and it will expand
to the string we assigned to it.

#+begin_src org
,#+TITLE: Example

,* Heading

To view this document in its raw format, follow this link: {{{blob}}}.
#+end_src

Read the [[Publishing your website][Publishing your website]] section for more information.

* Using Forgecast in your preamble/postamble

The following is a redefinition of a /predefined/ function from the
=ox-publish.el= library, we override it such as to extend it with our
own format strings. If you intend on using any other format strings,
such as the preset =%a= or =%e=, don't forget to add them, otherwise
they won't be expanded.

#+begin_src emacs-lisp
;; publish.el
(defun org-html-format-spec (info)
  "Return format specification for preamble and postamble."
  `((?b . ,(forgecast-get-resource-url 'blob))
    (?m . ,(forgecast-get-resource-url 'blame))
    (?t . ,(forgecast-get-resource-url 'tree))
    (?l . ,(forgecast-get-resource-url 'log))
    (?p . ,(forgecast-get-resource-url 'plain))
    (?e . ,(forgecast-get-resource-url 'edit))))
#+end_src

The format strings we previously defined need to be placed in an HTML
file whose job is to be the preamble or postamble.

#+begin_src html
<!-- templates/preamble.html -->
<nav style="text-align:center">
  <a href="%e"><button>Edit</button></a>
  <a href="%m"><button>Blame</button></a>
  <a href="%b"><button>Blob</button></a>
  <a href="%t"><button>Tree</button></a>
  <a href="%l"><button>Log</button></a>
  <a href="%p"><button>Plain</button></a>
</nav>
#+end_src

We'll need a way to access the content of these HTML files from our
publishing script, and this is what the =read-template= function does.

#+begin_src emacs-lisp
;; publish.el
(defun read-template (filename)
  "Read contents of FILENAME from the templates directory."
    (with-temp-buffer
      (insert-file-contents
       (file-name-concat "templates" filename))
      (buffer-string)))
#+end_src

Calling =(read-template "preamble.html")= should give us back the file
contents of the =preamble.html= template, but we'll bind it to a
variable and assign it to the =:html-preamble= property of the
=articles= component.

#+begin_src emacs-lisp
;; publish.el
(setq org-publish-project-alist
      (let ((preamble (read-template "preamble.html")))
	(list
	 (list "articles"
	       :base-extension "org"
	       :base-directory "articles"
	       :publishing-directory "public/articles"
	       :publishing-function 'org-html-publish-to-html
	       :html-preamble preamble
	       :html-postamble nil)
	 (list "all"
	       :components "articles"))))
#+end_src

Your website is now properly configured to use Forgecast.

Read the [[Publishing your website][Publishing your website]] section for more information.

* Publishing your website

The build system should load the =publish.el= file before calling the
=org-publish-all= function, and that should look something like:

#+begin_src sh
emacs --quick --batch \
      --load publish.el \
      --funcall org-publish-all t t
#+end_src
