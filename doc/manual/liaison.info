This is liaison.info, produced by makeinfo version 7.0.1 from
liaison.texi.

Copyright (C) 2022 Aziz Ben Ali.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, no Front-Cover Texts, and
     no Back-Cover Texts.  A copy of the license is included in the
     section entitled "GNU Free Documentation License".


File: liaison.info,  Node: Top,  Next: Installation,  Up: (dir)

Liaison
*******

This manual is a reference guide for Liaison 0.4.0, first released on
2023-01-06.

   • Homepage: <<https://grtcdr.tn/liaison>>
   • Repository: <<https://github.com/grtcdr/liaison>>

* Menu:

* Installation::
* Integration::
* Custom instances::

— The Detailed Node Listing —

Integration

* Using Liaison as a macro::
* Using Liaison in your preamble/postamble::
* Publishing your website::



File: liaison.info,  Node: Installation,  Next: Integration,  Prev: Top,  Up: Top

1 Installation
**************

Find and navigate to your desired project, and run the following in a
shell prompt:

     git clone https://github.com/grtcdr/liaison.git

   Likewise, you may choose to add it as a submodule:

     git submodule add https://github.com/grtcdr/liaison.git

   It is assumed that you have a publishing script which this manual has
chosen to name ‘publish.el’; within this file, you should define the
project specification as well as any other configuration variables or
special functions that affect the output of the published website.

   It is best that you initiate the publishing process using a
‘Makefile’.

   In your publishing script, add the package to the ‘load-path’ and
then require it like so:

     (add-to-list 'load-path "liaison")
     (require 'liaison)


File: liaison.info,  Node: Integration,  Next: Custom instances,  Prev: Installation,  Up: Top

2 Integration
*************

This section outlines the different steps needed to integrate this
package into your website, it assumes that you have already created a
publishing script.

   In the previous section you were told to import ‘liaison’, but you’ll
also need to import ‘ox-publish’ and any other libraries you depend on,
in your publishing script.

     (require 'ox-publish)

* Menu:

* Using Liaison as a macro::
* Using Liaison in your preamble/postamble::
* Publishing your website::


File: liaison.info,  Node: Using Liaison as a macro,  Next: Using Liaison in your preamble/postamble,  Up: Integration

2.1 Using Liaison as a macro
============================

This example registers a new ‘blob’ macro which will receive the URL to
the blob page of the currently visited document.

     (setq org-export-global-macros
           '(("blob" . "(eval (liaison-get-resource-url 'blob))")))

   We can now call the ‘blob’ macro in an Org document and it will
expand to the string we assigned to it.

     #+TITLE: Example

     * Heading

     To view this document in its raw format, follow this link: {{{blob}}}.


File: liaison.info,  Node: Using Liaison in your preamble/postamble,  Next: Publishing your website,  Prev: Using Liaison as a macro,  Up: Integration

2.2 Using Liaison in your preamble/postamble
============================================

In your publishing script, you will want to redefine the
‘org-html-format-spec’ function such as to extend it with your custom
format strings.

   If you intend to use any other format strings, such as the preset
‘%a’ or ‘%e’, don’t forget to add them, otherwise they won’t be
expanded.

     (defun org-html-format-spec (info)
       "Return format specification for preamble and postamble."
       `((?b . ,(liaison-get-resource-url 'blob))
         (?m . ,(liaison-get-resource-url 'blame))
         (?t . ,(liaison-get-resource-url 'tree))
         (?l . ,(liaison-get-resource-url 'log))
         (?p . ,(liaison-get-resource-url 'plain))
         (?e . ,(liaison-get-resource-url 'edit))))

   This next step involves preparing your project structure to support
the use of HTML templates; snippets which will be added onto our Org
documents.  These templates can reference at any point any of the format
strings defined in the ‘org-html-format-spec’ function.

   The following is an example of such a template:

     <nav>
       <a href="%e"><button>Edit</button></a>
       <a href="%m"><button>Blame</button></a>
       <a href="%b"><button>Blob</button></a>
       <a href="%t"><button>Tree</button></a>
       <a href="%l"><button>Log</button></a>
       <a href="%p"><button>Plain</button></a>
     </nav>

   During the export phase, Org will locate the format strings, and
interpolate them using the return value of their associated function.

   We’ll now need a way to access the contents of these HTML files from
our publishing script - to achieve that, you could use something like
this:

     (defun read-template (filename)
       "Read contents of FILENAME from the templates directory."
         (with-temp-buffer
           (insert-file-contents
            (file-name-concat "templates" filename))
           (buffer-string)))

   We will use ‘read-template’ along with the ‘:html-preamble’ property
to inject a preamble into the files of a particular project component.

     (setq org-publish-project-alist
           (let ((preamble (read-template "preamble.html")))
             (list
              (list "articles"
                    :base-extension "org"
                    :base-directory "articles"
                    :publishing-directory "public/articles"
                    :publishing-function 'org-html-publish-to-html
                    :html-preamble preamble
                    :html-postamble nil)
              (list "all"
                    :components "articles"))))

   Your website is now properly configured to use Liaison.


File: liaison.info,  Node: Publishing your website,  Prev: Using Liaison in your preamble/postamble,  Up: Integration

2.3 Publishing your website
===========================

The publishing script should be loaded before the ‘org-publish-project’
function is called, this translates to the following command:

     emacs --quick --batch \
           --load publish.el \
           --funcall org-publish-all t t


File: liaison.info,  Node: Custom instances,  Prev: Integration,  Up: Top

3 Custom instances
******************

Liaison by default doesn’t recognize domains beside the presets, so
you’ll have to specify the domain of your forge and its associated
resource URL builder.

   Now, suppose you’re a member of freedesktop.org
(https://www.freedesktop.org/wiki/), your wonderful projects are present
in the GitLab instance provided by your organization.

   To add support for your infrastructure, you need to customize the
‘liaison-forge-alist’ variable, here’s an example:

     (defvar liaison-forge-alist
       '(("gitlab.freedesktop.org" . #'liaison--build-gitlab-resource-url)))



Tag Table:
Node: Top511
Node: Installation999
Node: Integration1899
Node: Using Liaison as a macro2506
Node: Using Liaison in your preamble/postamble3146
Node: Publishing your website6001
Node: Custom instances6420

End Tag Table


Local Variables:
coding: utf-8
End:
