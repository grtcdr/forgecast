This is forgecast.info, produced by makeinfo version 7.0 from
forgecast.texi.

Copyright (C) 2022 Aziz Ben Ali.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, no Front-Cover Texts, and
     no Back-Cover Texts.  A copy of the license is included in the
     section entitled "GNU Free Documentation License".

INFO-DIR-SECTION Org Mode publishing extension
START-INFO-DIR-ENTRY
* Org Mode publishing to automate linking pages to their sources.
END-INFO-DIR-ENTRY


File: forgecast.info,  Node: Top,  Next: Installation,  Up: (dir)

Forgecast
*********

This manual is a reference guide for Forgecast 0.2.0, first released on
2022-11-13.

   • Homepage: <https://grtcdr.tn/forgecast>
   • Repository: <https://github.com/grtcdr/forgecast>

* Menu:

* Installation::
* Integration::

— The Detailed Node Listing —

Integration

* Using Forgecast as a macro::
* Using Forgecast in your preamble/postamble::
* Publishing your website::



File: forgecast.info,  Node: Installation,  Next: Integration,  Prev: Top,  Up: Top

1 Installation
**************

Find and navigate to your desired project, and run the following in a
shell prompt:

     git clone https://github.com/grtcdr/forgecast.git

   It is assumed that you have a publishing script where you define your
project specification and other configuration variables which affect how
your website is built, you can name this file ‘publish.el’ and execute
it from a ‘Makefile’.

   In your publishing script, add the package to the ‘load-path’ and
then require it like so:

     (add-to-list 'load-path "forgecast")
     (require 'forgecast)

   You’re all set.


File: forgecast.info,  Node: Integration,  Prev: Installation,  Up: Top

2 Integration
*************

This section outlines the different steps needed to integrate this
package into your website, it assumes that you have already created a
publishing script.

   In the previous section you were told to import ‘forgecast’, but
you’ll also need to import ‘ox-publish’ and any other libraries you
depend on, in your publishing script.

     (require 'ox-publish)

* Menu:

* Using Forgecast as a macro::
* Using Forgecast in your preamble/postamble::
* Publishing your website::


File: forgecast.info,  Node: Using Forgecast as a macro,  Next: Using Forgecast in your preamble/postamble,  Up: Integration

2.1 Using Forgecast as a macro
==============================

This example registers a new ‘blob’ macro which will receive the URL to
the blob page of the currently visited document.

     (setq org-export-global-macros
           '(("blob" . "(eval (forgecast-get-resource-url 'blob))")))

   We can now call the ‘blob’ macro in an Org document and it will
expand to the string we assigned to it.

     #+TITLE: Example

     * Heading

     To view this document in its raw format, follow this link: {{{blob}}}.

   Read the *note Publishing your website:: section for more
information.


File: forgecast.info,  Node: Using Forgecast in your preamble/postamble,  Next: Publishing your website,  Prev: Using Forgecast as a macro,  Up: Integration

2.2 Using Forgecast in your preamble/postamble
==============================================

In your publishing script, you will want to redefine the
‘org-html-format-spec’ function such as to extend it with your custom
format strings.

   If you intend to use any other format strings, such as the preset
‘%a’ or ‘%e’, don’t forget to add them, otherwise they won’t be
expanded.

     (defun org-html-format-spec (info)
       "Return format specification for preamble and postamble."
       `((?b . ,(forgecast-get-resource-url 'blob))
         (?m . ,(forgecast-get-resource-url 'blame))
         (?t . ,(forgecast-get-resource-url 'tree))
         (?l . ,(forgecast-get-resource-url 'log))
         (?p . ,(forgecast-get-resource-url 'plain))
         (?e . ,(forgecast-get-resource-url 'edit))))

   This next step involves preparing your project structure to support
the use of HTML templates; snippets which will be added onto our Org
documents.  These templates can reference at any point any of the format
strings defined in the ‘org-html-format-spec’ function.

   The following is an example of such a template:

     <nav style="text-align:center">
       <a href="%e"><button>Edit</button></a>
       <a href="%m"><button>Blame</button></a>
       <a href="%b"><button>Blob</button></a>
       <a href="%t"><button>Tree</button></a>
       <a href="%l"><button>Log</button></a>
       <a href="%p"><button>Plain</button></a>
     </nav>

   During the export phase, Org will locate the format strings, and
interpolate them using the return value of their associated function.

   We’ll now need a way to access the contents of these HTML files from
our publishing script - to achieve that, you could use something like
this:

     (defun read-template (filename)
       "Read contents of FILENAME from the templates directory."
         (with-temp-buffer
           (insert-file-contents
            (file-name-concat "templates" filename))
           (buffer-string)))

   We will use ‘read-template’ along with the ‘:html-preamble’ property
to inject a preamble into the files of a particular project component.

     (setq org-publish-project-alist
           (let ((preamble (read-template "preamble.html")))
             (list
              (list "articles"
                    :base-extension "org"
                    :base-directory "articles"
                    :publishing-directory "public/articles"
                    :publishing-function 'org-html-publish-to-html
                    :html-preamble preamble
                    :html-postamble nil)
              (list "all"
                    :components "articles"))))

   Your website is now properly configured to use Forgecast.

   Read the *note Publishing your website:: section for more
information.


File: forgecast.info,  Node: Publishing your website,  Prev: Using Forgecast in your preamble/postamble,  Up: Integration

2.3 Publishing your website
===========================

The build system should load the publishing script before calling the
‘org-publish-project’ function, and that should look something like:

     emacs --quick --batch \
           --load publish.el \
           --funcall org-publish-all t t



Tag Table:
Node: Top667
Node: Installation1146
Node: Integration1843
Node: Using Forgecast as a macro2433
Node: Using Forgecast in your preamble/postamble3160
Node: Publishing your website6140

End Tag Table


Local Variables:
coding: utf-8
End:
