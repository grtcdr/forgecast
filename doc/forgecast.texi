\input texinfo    @c -*- texinfo -*-
@c %**start of header
@setfilename forgecast.info
@settitle Forgecast
@documentencoding UTF-8
@documentlanguage en
@c %**end of header

@copying
Copyright (C) 2022 Aziz Ben Ali.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A
copy of the license is included in the section entitled "GNU Free
Documentation License".

@end quotation
@end copying

@dircategory Org Mode publishing extension
@direntry
* Org Mode publishing to automate linking pages to their sources.
@end direntry

@finalout
@titlepage
@title Forgecast
@author Aziz Ben Ali
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top Forgecast

This manual is a reference guide for Forgecast 0.2.0.

@itemize
@item
Homepage: @uref{https://grtcdr.tn/forgecast}
@item
Repository: @uref{https://github.com/grtcdr/forgecast}
@end itemize
@end ifnottex

@menu
* Installation::
* Integration::

@detailmenu
--- The Detailed Node Listing ---

Integration

* Using Forgecast as a macro::
* Using Forgecast in your preamble/postamble::
* Publishing your website::

@end detailmenu
@end menu

@node Installation
@chapter Installation

Find and navigate to your desired project, and run the following in a
shell prompt:

@example
git clone https://github.com/grtcdr/forgecast.git
@end example

It is assumed that you have a publishing script where you define your
project specification and other configuration variables which affect
how your website is built, you can name this file @samp{publish.el} and
execute it from a @samp{Makefile}.

In your publishing script, add the package to the @samp{load-path} and then
require it like so:

@lisp
(add-to-list 'load-path "forgecast")
(require 'forgecast)
@end lisp

You're all set.

@node Integration
@chapter Integration

This section outlines the different steps needed to integrate this
package into your website, it assumes that you have already created a
publishing script.

In the previous section you were told to import @samp{forgecast}, but
you'll also need to import @samp{ox-publish} and any other libraries you
depend on, in your publishing script.

@lisp
(require 'ox-publish)
@end lisp

@menu
* Using Forgecast as a macro::
* Using Forgecast in your preamble/postamble::
* Publishing your website::
@end menu

@node Using Forgecast as a macro
@section Using Forgecast as a macro

This example registers a new @samp{blob} macro which will receive the URL
to the blob page of the currently visited document.

@lisp
(setq org-export-global-macros
      '(("blob" . "(eval (forgecast-get-resource-url 'blob))")))
@end lisp

We can now call the @samp{blob} macro in an Org document and it will expand
to the string we assigned to it.

@example
#+TITLE: Example

* Heading

To view this document in its raw format, follow this link: @{@{@{blob@}@}@}.
@end example

Read the @ref{Publishing your website} section for more information.

@node Using Forgecast in your preamble/postamble
@section Using Forgecast in your preamble/postamble

In your publishing script, you will want to redefine the
@samp{org-html-format-spec} function such as to extend it with your custom
format strings.

If you intend to use any other format strings, such as the preset @samp{%a}
or @samp{%e}, don't forget to add them, otherwise they won't be expanded.

@lisp
(defun org-html-format-spec (info)
  "Return format specification for preamble and postamble."
  `((?b . ,(forgecast-get-resource-url 'blob))
    (?m . ,(forgecast-get-resource-url 'blame))
    (?t . ,(forgecast-get-resource-url 'tree))
    (?l . ,(forgecast-get-resource-url 'log))
    (?p . ,(forgecast-get-resource-url 'plain))
    (?e . ,(forgecast-get-resource-url 'edit))))
@end lisp

HTML files, act as preambles and postambles to the Org
documents we wish to write,

This next step involves preparing your project structure to support
the use of HTML templates; snippets which will be added onto our Org
documents. These templates can reference at any point any of the
format strings defined in the @samp{org-html-format-spec} function.

The following is an example of such a template:

@example
<nav style="text-align:center">
  <a href="%e"><button>Edit</button></a>
  <a href="%m"><button>Blame</button></a>
  <a href="%b"><button>Blob</button></a>
  <a href="%t"><button>Tree</button></a>
  <a href="%l"><button>Log</button></a>
  <a href="%p"><button>Plain</button></a>
</nav>
@end example

During the export phase, Org will locate the format strings, and
interpolate them using the return value of their associated function.

We'll now need a way to access the contents of these HTML files from
our publishing script - to achieve that, you could use something like
this:

@lisp
(defun read-template (filename)
  "Read contents of FILENAME from the templates directory."
    (with-temp-buffer
      (insert-file-contents
       (file-name-concat "templates" filename))
      (buffer-string)))
@end lisp

We will use @samp{read-template} along with the @samp{:html-preamble} property
to inject a preamble into the files of a particular project
component. 

@lisp
(setq org-publish-project-alist
      (let ((preamble (read-template "preamble.html")))
        (list
         (list "articles"
               :base-extension "org"
               :base-directory "articles"
               :publishing-directory "public/articles"
               :publishing-function 'org-html-publish-to-html
               :html-preamble preamble
               :html-postamble nil)
         (list "all"
               :components "articles"))))
@end lisp

Your website is now properly configured to use Forgecast.

Read the @ref{Publishing your website} section for more information.

@node Publishing your website
@section Publishing your website

The build system should load the publishing script before calling the
@samp{org-publish-project} function, and that should look something like:

@example
emacs --quick --batch \
      --load publish.el \
      --funcall org-publish-all t t
@end example

@bye